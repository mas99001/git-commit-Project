{
  "_args": [
    [
      {
        "raw": "grunt-git@github:rubenv/grunt-git",
        "scope": null,
        "escapedName": "grunt-git",
        "name": "grunt-git",
        "rawSpec": "github:rubenv/grunt-git",
        "spec": "github:rubenv/grunt-git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:rubenv/grunt-git.git",
          "sshUrl": "git+ssh://git@github.com/rubenv/grunt-git.git",
          "httpsUrl": "git+https://github.com/rubenv/grunt-git.git",
          "gitUrl": "git://github.com/rubenv/grunt-git.git",
          "shortcut": "github:rubenv/grunt-git",
          "directUrl": "https://raw.githubusercontent.com/rubenv/grunt-git/master/package.json"
        }
      },
      "E:\\N.G.4\\NM\\z-data-for-tm-work\\git-commit-Project"
    ]
  ],
  "_from": "rubenv/grunt-git",
  "_id": "grunt-git@1.0.7",
  "_inCache": true,
  "_location": "/grunt-git",
  "_phantomChildren": {},
  "_requested": {
    "raw": "grunt-git@github:rubenv/grunt-git",
    "scope": null,
    "escapedName": "grunt-git",
    "name": "grunt-git",
    "rawSpec": "github:rubenv/grunt-git",
    "spec": "github:rubenv/grunt-git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:rubenv/grunt-git.git",
      "sshUrl": "git+ssh://git@github.com/rubenv/grunt-git.git",
      "httpsUrl": "git+https://github.com/rubenv/grunt-git.git",
      "gitUrl": "git://github.com/rubenv/grunt-git.git",
      "shortcut": "github:rubenv/grunt-git",
      "directUrl": "https://raw.githubusercontent.com/rubenv/grunt-git/master/package.json"
    }
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git://github.com/rubenv/grunt-git.git#0eb1b019007b1eb6210cdff511565de09f1dfb89",
  "_shasum": "13d8d0cba481cd0e41f7d26e2480132b30ada7b6",
  "_shrinkwrap": null,
  "_spec": "grunt-git@github:rubenv/grunt-git",
  "_where": "E:\\N.G.4\\NM\\z-data-for-tm-work\\git-commit-Project",
  "author": {
    "name": "Ruben Vermeersch",
    "email": "ruben@savanne.be",
    "url": "http://savanne.be/"
  },
  "bugs": {
    "url": "https://github.com/rubenv/grunt-git/issues"
  },
  "dependencies": {
    "flopmang": "^0.0.1"
  },
  "description": "Git commands for grunt.",
  "devDependencies": {
    "grunt": "~1.0.1",
    "grunt-bump": "0.7.0",
    "grunt-contrib-clean": "~1.0.0",
    "grunt-contrib-jshint": "~1.0.0",
    "grunt-contrib-watch": "~1.0.0",
    "grunt-jscs": "~2.8.0",
    "grunt-mocha-cli": "~2.1.0",
    "mocha": "^3.4.2"
  },
  "engines": {
    "node": ">= 0.12.2"
  },
  "gitHead": "0eb1b019007b1eb6210cdff511565de09f1dfb89",
  "homepage": "https://github.com/rubenv/grunt-git",
  "keywords": [
    "gruntplugin"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rubenv/grunt-git/blob/master/LICENSE"
    }
  ],
  "main": "lib/commands.js",
  "name": "grunt-git",
  "optionalDependencies": {},
  "peerDependencies": {
    "grunt": "~1.0.1"
  },
  "readme": "# grunt-git\r\n\r\n> Git commands for grunt.\r\n\r\n[![Build Status](https://travis-ci.org/rubenv/grunt-git.png?branch=master)](https://travis-ci.org/rubenv/grunt-git)\r\n\r\n## Getting Started\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-git --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-git');\r\n```\r\n\r\n### Upgrading from v0.2.x\r\nThe `gitcommit` command used to call `git add` for you. This is no longer the case. Be sure to add a `gitadd` task whenever there might be new files to commit. The `ignoreEmpty` option is no longer supported.\r\n\r\n## Universal options\r\nThe following options may be applied to any task\r\n\r\n#### options.verbose\r\nType: `Boolean`\r\nDefault value: `none`\r\n\r\nConsole output from the git task will be piped to the output of the grunt script. Useful for debugging.\r\n\r\n#### options.cwd\r\nType: `string`\r\nDefault value: `none`\r\n\r\nChange the current working directory before executing the git call. Useful for performing operations on repositories that are located in subdirectories.\r\n**Note:** When performing commands that provide files (e.g. gitcommit), it is also necessary to specify the ``cwd`` for the files explicitly.\r\n\r\n#### Example:\r\n```js\r\ngrunt.initConfig({\r\n  gitcommit: {\r\n    your_target: {\r\n      options: {\r\n        cwd: \"/path/to/repo\"\r\n      },\r\n      files: [\r\n        {\r\n          src: [\"fileone.txt\", \"filetwo.js\"],\r\n          expand: true,\r\n          cwd: \"/path/to/repo\"\r\n        }\r\n      ]\r\n    }\r\n  },\r\n})\r\n```\r\n\r\n## The \"gitadd\" task\r\n\r\nAdd file contents to the index\r\n\r\n### Options\r\n\r\n#### options.all\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nUpdate the index not only where the working tree has a file matching <pathspec> but also where the\r\nindex already has an entry. This adds, modifies, and removes index entries to match the working tree.\r\n\r\n#### options.force\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nAllow adding otherwise ignored files.\r\n\r\n### Usage Examples\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitadd: {\r\n    task: {\r\n      options: {\r\n        force: true\r\n      },\r\n      files: {\r\n        src: ['test.txt']\r\n      }\r\n    }\r\n  },\r\n});\r\n```\r\n\r\n## The \"gitcommit\" task\r\n\r\nCommits the working directory.\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `gitcommit` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitcommit: {\r\n    your_target: {\r\n      options: {\r\n        // Target-specific options go here.\r\n      },\r\n      files: {\r\n          // Specify the files you want to commit\r\n      }\r\n    }\r\n  },\r\n})\r\n```\r\n\r\nEach target defines a specific git task that can be run. The different available tasks are listed below.\r\n\r\n### Options\r\n\r\n#### options.message\r\nType: `String`\r\nDefault value: `'Commit'`\r\n\r\nThe commit message.\r\n\r\n#### options.description\r\nType: `String`\r\nDefault value: `false`\r\n\r\nThe commit description.\r\n\r\n#### options.allowEmpty\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhen `true`, the task will not fail when there are no staged changes (optional).\r\n\r\n#### options.noVerify\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhen `true`, the task will commit the changes with the `--no-verify` flag.\r\n\r\n#### options.noStatus\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhen `true`, the task will commit the changes with the `--no-status` flag.\r\n\r\n### Usage Examples\r\n\r\nCommit options:\r\n\r\n* `message`: Commit message\r\n* `files`: Files to commit\r\n* `noVerify`: Bypass the pre-commit and commit-msg hooks when committing changes\r\n* `noStatus`: Do not include the output of `git-status` in the commit message\r\n\r\n```js\r\ngrunt.initConfig({\r\n    gitcommit: {\r\n        task: {\r\n            options: {\r\n                message: 'Testing',\r\n                noVerify: true,\r\n                noStatus: false\r\n            },\r\n            files: {\r\n                src: ['test.txt']\r\n            }\r\n        }\r\n    },\r\n});\r\n```\r\n\r\n\r\n## The \"gitrebase\" task\r\n\r\nRebases the current branch onto another branch\r\n\r\n### Options\r\n\r\n#### options.branch (required)\r\nType: `String`\r\nthe name of the branch you want to rebase **on to**.  For example if the current branch were `codfish` and you wanted to rebase it onto `master`, you would set this value to `master`.\r\n\r\n#### options.theirs\r\nType: `Boolean`\r\n  Default value: `false`\r\n\r\nWhen true, use the git equivalent of svn's `theirs-conflict` (`--strategy=recursive -Xtheirs`).\r\n\r\n### Usage Examples\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitrebase: {\r\n    task: {\r\n      options: {\r\n        branch: 'master'\r\n      }\r\n    }\r\n  },\r\n});\r\n```\r\n\r\n## The \"gittag\" task\r\n\r\nCreates (or deletes) a git tag.\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `gittag` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gittag: {\r\n    your_target: {\r\n      options: {\r\n        // Target-specific options go here.\r\n      }\r\n    }\r\n  },\r\n})\r\n```\r\n\r\nEach target defines a specific git task that can be run. The different available tasks are listed below.\r\n\r\n### Options\r\n\r\n#### options.tag\r\nType: `String`\r\nDefault value: `''`\r\n\r\nThe name of the tag. E.g.: `0.0.1`.\r\n\r\n#### options.message\r\nType: `String`\r\nDefault value: `''`\r\n\r\nThe tag message (optional).\r\n\r\n#### options.remove\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhether to delete the tag (optional).\r\n\r\n#### options.annotated\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhether to create an annotated tag (optional).\r\n\r\n#### options.force\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhether to force to create or update the tag (optional).\r\n\r\n### Usage Examples\r\n\r\n```js\r\ngrunt.initConfig({\r\n    gittag: {\r\n        addtag: {\r\n            options: {\r\n                tag: '0.0.1',\r\n                message: 'Testing'\r\n            }\r\n        },\r\n        deletetag: {\r\n            options: {\r\n                tag: '0.0.1',\r\n                remove: true\r\n            }\r\n        }\r\n    },\r\n});\r\n```\r\n\r\n## The \"gitcheckout\" task\r\n\r\nCreates a git branch using checkout -b, or checks out a given branch.\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `gitcheckout` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitcheckout: {\r\n    your_target: {\r\n      options: {\r\n        // Target-specific options go here.\r\n      }\r\n    }\r\n  },\r\n})\r\n```\r\n\r\nEach target defines a specific git task that can be run. The different available tasks are listed below.\r\n\r\n### Options\r\n\r\n#### options.branch\r\nType: `String`\r\nDefault value: `''`\r\n\r\nThe name of the branch. E.g.: `testing`.\r\n\r\n#### options.create\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhether the branch should be created (optional).\r\n\r\n#### options.force\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhether the checkout should be forced in the case of git errors (optional)\r\n\r\n#### options.overwrite\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhether the branch should be overwritten, or created if it doesn't already exist (optional).\r\n\r\n**NOTE:** When enabled, this option overwrites the target branch with the current branch.\r\n\r\n### Usage Examples\r\n\r\n```js\r\ngrunt.initConfig({\r\n    gitcheckout: {\r\n        task: {\r\n            options: {\r\n                branch: 'testing',\r\n                create: true\r\n            }\r\n        }\r\n    },\r\n});\r\n```\r\n\r\n## The \"gitstash\" task\r\n\r\nStash the changes in a dirty working directory away.\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `gitstash` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitstash: {\r\n    your_target: {\r\n      options: {\r\n        // Target-specific options go here.\r\n      }\r\n    }\r\n  },\r\n})\r\n```\r\n\r\nEach target defines a specific git task that can be run. The different available tasks are listed below.\r\n\r\n### Options\r\n\r\n#### options.command\r\nType: `String`\r\nDefault value: `'save'`\r\n\r\nThe stash command to run. E.g.: `save`, `apply`.\r\n\r\n#### options.stash\r\nType: `Integer`\r\nDefault value: `''`\r\n\r\nThe stash to apply. E.g.: `0` (optional).\r\n\r\n#### options.staged\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWhether the staged changes should be reapplied (optional).\r\n\r\n### Usage Examples\r\n\r\n```js\r\ngrunt.initConfig({\r\n    gittag: {\r\n        stash: {\r\n            options: {\r\n                create: true\r\n            }\r\n        },\r\n        apply: {\r\n            options: {\r\n                command: 'apply',\r\n                staged: true,\r\n                stash: '0'\r\n            }\r\n        }\r\n    },\r\n});\r\n```\r\n\r\n## The \"gitclone\" task\r\n\r\nClones a git repo.\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `gitclone` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitclone: {\r\n    your_target: {\r\n      options: {\r\n        // Target-specific options go here.\r\n      }\r\n    }\r\n  },\r\n})\r\n```\r\n\r\nEach target defines a specific git task that can be run. The different available tasks are listed below.\r\n\r\n### Options\r\n\r\n#### options.bare\r\nType: `Boolean`\r\nDefault value: none\r\n\r\nRun git clone with the `--bare` option applied.\r\n\r\n#### options.branch\r\nType: `String`\r\nDefault value: none\r\n\r\nClone the repo with a specific branch checked out. (Cannot be used in conjunction with 'bare')\r\n\r\n#### options.depth\r\nType: `Integer`\r\nDefault value: none\r\n\r\nClone the repo with a limited revision history. (Such clones cannot be pushed from or pulled to.)\r\n\r\n#### options.repository (required)\r\nType: `String`\r\nDefault value: none\r\n\r\nThe path to the repository you want to clone.\r\n\r\n#### options.directory\r\nType: `String`\r\nDefault value: none\r\n\r\nClone the repo into a specific directory instead of the one git decides.\r\n\r\n#### options.recursive\r\nType: `Boolean`\r\nDefault value: none\r\n\r\nPass the --recursive flag to the git clone command. This is equivalent to running git submodule update --init --recursive immediately after the clone is finished.\r\n\r\n### Usage Examples\r\n\r\n```js\r\ngrunt.initConfig({\r\n    gitclone: {\r\n        clone: {\r\n            options: {\r\n                repository: 'https://github.com/you/your-git-repo.git',\r\n                branch: 'my-branch',\r\n                directory: 'repo'\r\n            }\r\n        }\r\n    },\r\n});\r\n```\r\n\r\n## The \"gitreset\" task\r\n\r\nCreates a git branch using checkout -b, or checks out a given branch.\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `gitreset` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitreset: {\r\n    your_target: {\r\n      options: {\r\n        // Target-specific options go here.\r\n      },\r\n      files: {\r\n        src: // Target-specific files go here.\r\n      }\r\n    }\r\n  },\r\n})\r\n```\r\n\r\nEach target defines a specific git task that can be run. The different available tasks are listed below.\r\n\r\n### Options\r\n\r\n#### options.mode\r\nType: `String`\r\nDefault value: `''`\r\n\r\nThe reset mode to run. E.g.: `hard`, `merge`.\r\n\r\n#### options.commit\r\nType: `String`\r\nDefault value: `'HEAD'`\r\n\r\nWhich commit to reset to (optional).\r\n\r\n### Usage Examples\r\n\r\n```js\r\ngrunt.initConfig({\r\n    gitreset: {\r\n        task: {\r\n            options: {\r\n                mode: 'hard',\r\n                commit: 'HEAD~1'\r\n            }\r\n        }\r\n    },\r\n});\r\n```\r\n## The \"gitrm\" task\r\n\r\nRemoves files from git's working tree and index.\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `gitrm` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitrm: {\r\n    your_target: {\r\n      options: {\r\n        // Target-specific options go here.\r\n      },\r\n      files: {\r\n        src: // Target-specific files go here.\r\n      }\r\n    }\r\n  },\r\n})\r\n```\r\n\r\nEach target defines a specific git task that can be run. The different available tasks are listed below.\r\n\r\n### Options\r\n\r\n#### options.force\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill force a removal of the files listed in the configuration.\r\n\r\n#### options.recurse\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill recurse into subdirectories if specified in the configuration.\r\n\r\n### Usage Examples\r\n\r\n```js\r\ngrunt.initConfig({\r\n    gitrm: {\r\n        task: {\r\n            options: {\r\n                force: 'true'\r\n            },\r\n            files: {\r\n                src: ['dist/test.min.js']\r\n            }\r\n        }\r\n    },\r\n});\r\n```\r\n\r\n## The \"gitclean\" task\r\n\r\nRemove untracked files from the working tree.\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `gitclean` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitclean: {\r\n    your_target: {\r\n      options: {\r\n        // Target-specific options go here.\r\n      },\r\n      files: {\r\n        src: // Target-specific paths go here (optional).\r\n      }\r\n    }\r\n  },\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.force\r\nType: `Boolean`\r\nDefault value: `true`\r\n\r\nForce a run of the clean command (optional).\r\n\r\n#### options.dry\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nDon't actually remove anything, just show what would be done (optional).\r\n\r\n#### options.quiet\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nBe quiet, only report errors, but not the files that are successfully removed (optional).\r\n\r\n#### options.exclude\r\nType: `String`\r\nDefault value: `false`\r\n\r\nIn addition to those found in .gitignore (per directory) and $GIT_DIR/info/exclude, also consider the given patterns to be in the set of the ignore rules in effect (optional).\r\n\r\n#### options.onlyignorefiles\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nRemove only files ignored by Git. This may be useful to rebuild everything from scratch, but keep manually created files (optional).\r\n\r\n#### options.nonstandard\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nDon't use the standard ignore rules read from .gitignore (per directory) and $GIT_DIR/info/exclude, but do still use the ignore rules given with this option. This allows removing all untracked files, including build products. This can be used (possibly in conjunction with git reset) to create a pristine working directory to test a clean build (optional).\r\n\r\n#### options.directories\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nRemove untracked directories in addition to untracked files. If an untracked directory is managed by a different Git repository, it is not removed by default (optional).\r\n\r\n## The \"gitpush\" task\r\n\r\nPushes to a remote.\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `gitpush` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitpush: {\r\n    your_target: {\r\n      options: {\r\n        // Target-specific options go here.\r\n      }\r\n    }\r\n  },\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.remote\r\nType: `String`\r\nDefault value: `'origin'`\r\n\r\nThe remote where to push. E.g.: `origin`, `heroku`. The task will push to `origin` if left unset.\r\n\r\n#### options.branch\r\nType: `String`\r\nDefault value: `null`\r\n\r\nThe remote branch to push to. E.g.: `master`, `develop`. The task will push to the tracked branch if left unset.\r\n\r\n#### options.all\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill add the `--all` flag to the push.\r\n\r\n#### options.tags\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill add the `--tags` flag to the push.\r\n\r\n#### options.upstream\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill add the `--set-upstream` flag to the push.\r\n\r\n#### options.force\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill add the `--force` flag to the push.\r\n\r\n## The \"gitpull\" task\r\n\r\nPulls from a remote.\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `gitpull` to the data object passed into `grunt.initConfig()`.\r\nYou can change the remote (origin is by default), and you can add a branch you want to pull from.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitpull: {\r\n    your_target: {\r\n      options: {\r\n\r\n      }\r\n    }\r\n  },\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.remote\r\nType: `String`\r\nDefault value: `origin`\r\n\r\nThe remote to pull from. The task will not fail if the origin is left unset and pull the default remote git origin.\r\n\r\n#### options.branch\r\nType: `String`\r\nDefault value: `master`\r\n\r\nThe branch to pull from. E.g.: `master`, `develop` (optional).\r\n\r\n## The \"gitfetch\" task\r\n\r\nDownload objects and refs from a repo.\r\n\r\n### Overview\r\n\r\nIn your project's Gruntfile, add a section named `gitfetch` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitfetch: {\r\n    your_target: {\r\n      options: {\r\n        all: true\r\n      }\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.repository\r\nType: `String`\r\nDefault value: `null`\r\n\r\nThe repository you want to fetch from. When no remote is specified, by default the origin remote will be used.\r\n\r\n#### options.all\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nAdds the `--all` flag. Fetch all remotes.\r\n\r\n#### options.append\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nAdds the `--append` flag. Append ref names and object names of fetched refs.\r\n\r\n#### options.prune\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nAdds the `--prune` flag. After fetching, remove any remote-tracking references that no longer exist on the remote.\r\n\r\n#### options.notags\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nAdds the `--no-tags` flag. Disables automatic tag following.\r\n\r\n#### options.tags\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nAdds the `--tags` flag. Fetch all tags from the remote into local.\r\n\r\n## The \"gitrevParse\" task\r\n\r\nPick out and massage parameters.\r\n\r\n### Overview\r\n\r\nIn your project's Gruntfile, add a section named `gitrevParse` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitrevParse: {\r\n    your_target: {\r\n      options: {\r\n        short: 7,\r\n        treeIsh: 'master',\r\n        prop: 'gitrevParse.your_target.result',\r\n        callback: function(result) {\r\n          grunt.gitrevParse.your_target.result = result;\r\n        }\r\n      }\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.short\r\nType: `Integer`\r\nDefault value: none.\r\n\r\nAdds the `--short=` option, set to the specified number of characters.\r\n\r\n#### options.treeIsh\r\nType: `String`\r\nDefault value: `'HEAD'`\r\n\r\nThe tree or commit object to examine.\r\n\r\n#### options.abbrevRef\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nAdds the `--abbrev-ref` flag. Try and output the abbreviated reference for the tree-ish object instead of the SHA-1 checksum.\r\n\r\n#### options.prop\r\nType: `String`\r\nDefault value: `'gitrevParse.<target name>.result'`.\r\n\r\nThe grunt property in which to store the results.\r\n\r\n#### options.callback\r\nType: `Function`\r\nDefault value: none.\r\n\r\nA callback function that is called with the rev-parse results provided as the sole parameter.\r\n\r\n## The \"gitmerge\" task\r\n\r\nMerges another branch into the current branch.\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `gitmerge` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitmerge: {\r\n    your_target: {\r\n      options: {\r\n        // Target-specific options go here.\r\n      }\r\n    }\r\n  },\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.branch\r\nType: `String`\r\nDefault value: `null`\r\n\r\nThe branch to merge from. E.g.: `master`, `develop`. The task will fail if the branch if left unset.\r\n\r\n#### options.ffOnly\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill add the `--ff-only` flag to the merge.\r\n\r\n#### options.noff\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill add the `--no-ff` flag to the merge.\r\n\r\n#### options.squash\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill add the `--squash` flag to the merge.\r\n\r\n#### options.edit\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill add the `--edit` flag to the merge: this forces an editor to appear before committing the successful merge.\r\n\r\n#### options.noEdit\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill add the `--no-edit` flag to the merge: this bypasses the editor from appearing before committing a successful merge.\r\n\r\n#### options.message\r\nType: `String`\r\nDefault value: `null`\r\n\r\nWill add the `-m` flag followed by the value of this option to the merge: this string will be used as the commit message for the merge.\r\n\r\n#### options.commit\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill add the `--commit` flag to the merge: this option can be used to override ``-no-commit`` in the git config.\r\n\r\n#### options.noCommit\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nWill add the `--no-commit` flag to the merge: do not commit the merge.\r\n\r\n#### options.strategy\r\nType: `String`\r\nDefault value: `null`\r\n\r\nWill add the `-s` flag followed by the value of this option to the merge: this string will be used to specify the strategy for the merge.\r\n\r\n#### options.strategyOption\r\nType: `String`\r\nDefault value: `null`\r\n\r\nWill add the `-X` flag followed by the value of this option to the merge: this string will be used to specify a strategy-specific option for the merge.\r\n\r\n## The \"gitarchive\" task\r\n\r\nArchives a branch.\r\n\r\n### Overview\r\n\r\nIn your project's Gruntfile, add a section named `gitarchive` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitarchive: {\r\n    master: {\r\n      options: {\r\n        format: 'tar.gz',\r\n        prefix: 'your-project-name/',\r\n        treeIsh: 'master',\r\n        output: '/tmp/your-project-name.tar.gz',\r\n        path: ['README', 'LICENSE']\r\n      }\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.treeIsh\r\nType: `String`\r\nDefault value: `'master'`.\r\n\r\nThe tree or commit to produce an archive for. E.g.: `'master'` or a commit hash.\r\n\r\n#### options.format\r\nType: `String`\r\nDefault value: `'tar'`.\r\n\r\nFormat of the resulting archive: `'tar'`, `'tar.gz'`, `'zip'`. If this option is not given, and the output file is specified, the format is inferred from the filename if possible (e.g. writing to \"foo.zip\" makes the output to be in the zip format). Otherwise the output format is tar.\r\n\r\n#### options.prefix\r\nType: `String`\r\nDefault value: none.\r\n\r\nAdds the `--prefix` flag. Don't forget the trailing `/`.\r\n\r\n#### options.output\r\nType: `String`\r\nDefault value: none.\r\n\r\nAdds the `--output` flag. Write the archive to a file instead of `stdout`.\r\n\r\n#### options.remote\r\nType: `String`\r\nDefault value: none.\r\n\r\nAdds the `--remote` flag. Instead of making a tar archive from the local repository, retrieve a tar archive from a remote repository.\r\n\r\n#### options.path\r\nType: `Array`\r\nDefault value: none.\r\n\r\nWithout an optional `path` parameter, all files and subdirectories of the current working directory are included in the archive. If one or more paths are specified, only these are included.\r\n\r\n\r\n## The \"gitlog\" task\r\n\r\nLogs commit history and stores the result in a grunt property or calls a callback function with the result. The result is an array of objects with the following properties:\r\n\r\n* `hash` - the commit hash\r\n* `author` - an object with `name` and `email` properties\r\n* `date` - the date of the commit\r\n* `subject` - the subject string of the commit\r\n* `body` - the body string of the commit\r\n\r\n### Overview\r\n\r\nIn your project's Gruntfile, add a section named `gitlog` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitlog: {\r\n    mytarget: {\r\n      options: {\r\n        prop: 'gitlog.mytarget.result',\r\n        from: 'v0.2.0',\r\n        to: 'v0.2.2'\r\n      }\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.prop\r\nType: `String`\r\nDefault value: `'gitlog.<target name>.result'`.\r\n\r\nThe grunt property in which to store the results.\r\n\r\n#### options.callback\r\nType: `Function`\r\nDefault value: none.\r\n\r\nA callback function to call with the log results.\r\n\r\n#### options.pretty\r\nType: `String`\r\nDefault value:\r\n```\r\n    'format:' +\r\n    '{%n' +\r\n    '  \"hash\": \"%H\",%n' + // commit hash\r\n    '  \"author\": {%n' +\r\n    '    \"name\": \"%an\",%n' + // author\r\n    '    \"email\": \"%ae\"%n' + // email\r\n    '  },%n' +\r\n    '  \"date\": \"%aD\",%n' + // date\r\n    '  \"subject\": \"%s\",%n' + // subject\r\n    '  \"body\": \"%b\"%n' + // body\r\n    '}%n' +\r\n    '--grunt-gitlog-separator--' // separator\r\n```\r\n\r\nThe format for the log output\r\n\r\n#### options.number\r\nType: `Int`\r\nDefault value: none.\r\n\r\nThe number of logs entries to export\r\n\r\n#### options.from\r\nType: `String`\r\nDefault value: none.\r\n\r\nA commit hash, tag, etc to start from.\r\n\r\n#### options.to\r\nType: `String`\r\nDefault value: none.\r\n\r\nA commit hash, tag, etc to end at. Defaults to `'HEAD'` if `from` is specified.\r\n\r\n#### options.dateOrder\r\nType: `Boolean`\r\nDefault value: none.\r\n\r\nWhether to order by date. Defaults to true when `options.after` or `options.before` are specified.\r\n\r\n#### options.after\r\nType: `Date`\r\nDefault value: none.\r\n\r\nA date to start from. Causes `options.dateOrder` to be true\r\n\r\n#### options.before\r\nType: `Date`\r\nDefault value: none.\r\n\r\nA date to stop at. Causes `options.dateOrder` to be true\r\n\r\n#### options.noMerges\r\nType: `Boolean`\r\nDefault value: true.\r\n\r\nWhether or not to include merges in the logs.\r\n\r\n## The \"gitapply\" task\r\n\r\nApplies a patch (or a series of patches) to your cwd\r\n\r\n### Overview\r\n\r\nIn your project's Gruntfile, add a section named `gitapply` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  gitapply: {\r\n    mytarget: {\r\n      options: {\r\n        patchFiles: './myFile.patch',\r\n      }\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.patchFiles\r\ntype: `String`\r\ndefault value: none.\r\n\r\nString (can be a glob), representing the path to the patch files you want to apply\r\n\r\n#### options.stat\r\nType: `Boolean`\r\nDefault value: none\r\n\r\nRather than actually applying the patch, outputs a diffstat to your optional `callback`.\r\nWill not apply your patch by default - override by setting `options.apply` to true\r\n\r\n#### options.numstat\r\nType: `Boolean`\r\nDefault value: none\r\n\r\nSimilar to `options.stat`, but shows the number of added and deleted lines in decimal notation and the pathname without abbreviation, to make it more machine friendly. For binary files, outputs two - instead of saying 0 0.\r\nWill not apply your patch by default - override by setting `options.apply` to true\r\n\r\n#### options.summary\r\nType: `Boolean`\r\nDefault value: none\r\n\r\nInstead of applying the patch, output a condensed summary of information obtained from git diff extended headers, such as creations, renames and mode changes.\r\nWill not apply your patch by default - override by setting `options.apply` to true\r\n\r\n#### options.check\r\nType: `Boolean`\r\nDefault value: none\r\n\r\nInstead of applying the patch, see if the patch is applicable to the current working tree and/or the index file and detects errors.\r\nWill not apply your patch by default - override by setting `options.apply` to true\r\n\r\n#### options.index\r\ntype: `Boolean`\r\ndefault value: none\r\n\r\nwhen `options.check` is in effect, or when applying the patch (which is the default when none of the options that disables it is in effect), make sure the patch is applicable to what the current index file records. if the file to be patched in the working tree is not up-to-date, it is flagged as an error. this flag also causes the index file to be updated.\r\n\r\n#### options.threeway\r\ntype: `Boolean`\r\ndefault value: none\r\n\r\nWhen the patch does not apply cleanly, fall back on 3-way merge if the patch records the identity of blobs it is supposed to apply to, and we have those blobs available locally, possibly leaving the conflict markers in the files in the working tree for the user to resolve. This option implies `options.index`, and is incompatible with `options.reject` and `options.cached`.\r\n\r\n#### options.reverse\r\ntype: `Boolean`\r\ndefault value: none\r\n\r\nApply the patch in reverse.\r\n\r\n#### options.reject\r\ntype: `Boolean`\r\ndefault value: none\r\n\r\nFor atomicity, git apply by default fails the whole patch and does not touch the working tree when some of the hunks do not apply. This option makes it apply the parts of the patch that are applicable, and leave the rejected hunks in corresponding `*.rej` files.\r\n\r\n### options.numStatKeepPathNames\r\ntype: `Boolean`\r\ndefault value: none\r\n\r\nWhen `options.numstat` has been given, do not munge pathnames, but use a NUL-terminated machine-readable format.\r\nWithout this option, each pathname output will have TAB, LF, double quotes, and backslash characters replaced with `\\t`, `\\n`, `\\\"`, and `\\\\`, respectively, and the pathname will be enclosed in double quotes if any of those replacements occurred.\r\n\r\n### options.removeLeadingSlashes\r\ntype: `int`\r\ndefault value: none\r\n\r\nRemoves the number of leading slashes from traditional diff paths as you give in the options (e.g. `{p: 10}` means remove 10).\r\n\r\n### options.ensureContextMatch\r\ntype: `int`\r\ndefault value: none\r\n\r\nEnsure at least the number of lines given in the config of surrounding context match before and after each change. When fewer lines of surrounding context exist they all must match. By default no context is ever ignored.\r\n\r\n### options.unidiffZero\r\ntype: `Boolean`\r\ndefault value: none\r\n\r\nBy default, git apply expects that the patch being applied is a unified diff with at least one line of context. This provides good safety measures, but breaks down when applying a diff generated with --unified=0. To bypass these checks use `options.unidiffZero`.\r\n\r\n### options.apply\r\ntype: `Boolean`\r\ndefault value: none\r\n\r\nIf you use any of the options marked \"Turns off apply\" above, git apply reads and outputs the requested information without actually applying the patch. Give this flag after those flags to also apply the patch.\r\n\r\n### options.noAdd\r\ntype: `Boolean`\r\ndefault value: none\r\n\r\nWhen applying a patch, ignore additions made by the patch. This can be used to extract the common part between two files by first running diff on them and applying the result with this option, which would apply the deletion part but not the addition part.\r\n\r\n### options.exclude\r\ntype: `String`\r\ndefault value: none\r\n\r\nDon’t apply changes to files matching the given path pattern. This can be useful when importing patchsets, where you want to exclude certain files or directories.\r\n\r\n### options.include\r\ntype: `String`\r\ndefault value: none\r\n\r\nApply changes to files matching the given path pattern. This can be useful when importing patchsets, where you want to include certain files or directories.\r\n\r\n### options.ignoreSpaceChange\r\ntype: `Boolean`\r\ndefault value: none\r\n\r\nWhen applying a patch, ignore changes in whitespace in context lines if necessary. Context lines will preserve their whitespace, and they will not undergo whitespace fixing regardless of the value of this option. New lines will still be fixed, though.\r\n\r\n### options.ignoreWhitespace\r\ntype: `Boolean`\r\ndefault value: none\r\n\r\nAlias value for `options.ignoreSpaceChang`\r\n\r\n### options.whitespace\r\ntype: `String`\r\ndefault value: none\r\n\r\nWhen applying a patch, detect a new or modified line that has whitespace errors. What are considered whitespace errors is controlled by `core.whitespace` configuration. By default, trailing whitespaces (including lines that solely consist of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors.\r\n\r\nBy default, the command outputs warning messages but applies the patch. When git-apply is used for statistics and not applying a patch, it defaults to nowarn.\r\n\r\nYou can use different values to control this behavior:\r\n\r\n- `nowarn` turns off the trailing whitespace warning.\r\n- `warn` outputs warnings for a few such errors, but applies the patch as-is (default).\r\n- `fix` outputs warnings for a few such errors, and applies the patch after fixing them (strip is a synonym --- the tool used to consider only trailing whitespace characters as errors, and the fix involved stripping them, but modern Gits do more).\r\n- `error` outputs warnings for a few such errors, and refuses to apply the patch.\r\n- `error-all` is similar to error but shows all errors.\r\n\r\nThe output is made available via `options.callback`\r\n\r\n### options.inaccurateEOF\r\ntype: `Boolean`\r\ndefault value: none\r\n\r\nUnder certain circumstances, some versions of diff do not correctly detect a missing new-line at the end of the file. As a result, patches created by such diff programs do not record incomplete lines correctly. This option adds support for applying such patches by working around this bug.\r\n\r\n### options.recount\r\ntype: `Boolean`\r\ndefault value: none\r\n\r\nDo not trust the line counts in the hunk headers, but infer them by inspecting the patch (e.g. after editing the patch without adjusting the hunk headers appropriately).\r\n\r\n### options.directory\r\ntype: `String`\r\ndefault value: none\r\n\r\nPrepend the value you assign to `options.directory` to all filenames. If a `options.removeLeadingSlashes`  also set, it is applied before prepending the new root.\r\n\r\nFor example, a patch that talks about updating `a/git-gui.sh` to `b/git-gui.sh` can be applied to the file in the working tree `modules/git-gui/git-gui.sh` by setting `{ directory: \"modules/git-gui\" }`.\r\n\r\n### options.unsafePaths\r\ntype: `Boolean`\r\ndefault value: none\r\n\r\nBy default, a patch that affects outside the working area (either a Git controlled working tree, or the current working directory when \"git apply\" is used as a replacement of GNU patch) is rejected as a mistake (or a mischief).\r\n\r\n#### options.callback\r\ntype: `function`\r\ndefault value: none.\r\n\r\na callback function to call with the log results.\r\n\r\n#### options.noWalk\r\nType: `Boolean`\r\nDefault value: false.\r\n\r\nOnly show the given commits, and do no traverse their ancestors. Has NO effect if `to` or `from` is also specified.\r\n\r\n#### options.tags\r\nType: `Boolean`\r\nDefault value: false.\r\n\r\nOnly list all tagged commits\r\n\r\n## The \"gitstatus\" task\r\n\r\nFetches the git status, storing the result in a grunt property, and/or calling a callback function with the result.\r\n\r\nThe result is a list of objects, each with the following properties:\r\n\r\n* `file` - the indicated filename.\r\n* `code` - a two letter code indicating the status of the file.\r\n* `descr` - a short description of the status.\r\n\r\nIn some cases there is an additional property, `alt_file`, for example if the file has been renamed.\r\n\r\nHere's an example result:\r\n\r\n```js\r\n[ { code: 'R ', file: 'from',                descr: 'renamed in index',\r\n        alt_file: 'to'\r\n        },\r\n  { code: '??', file: 'untracked_file.txt',  descr: 'untracked' },\r\n  { code: 'A ', file: 'new_file.txt',        descr: 'added to index' },\r\n  { code: 'D ', file: 'deprecated_file.txt', descr: 'deleted from index' },\r\n  { code: 'AA', file: 'popular_file.txt',    descr: 'unmerged, both added' },\r\n  { code: '!!', file: 'node_modules/',       descr: 'ignored' }\r\n]\r\n```\r\n\r\nNote that ignored files will only be included if the `includeIgnored` option is set (see below).\r\n\r\nFor full details on all the possible codes, please see the [git status documentation](https://git-scm.com/docs/git-status#_output).\r\n\r\n### Overview\r\n\r\nIn your project's Gruntfile, add a section named `gitstatus` to the data object passed into `grunt.initConfig()`.\r\n\r\nProperties `prop` and `callback` are both optional, though not using at least one is pointless.\r\n\r\n```js\r\ngrunt.initConfig({\r\n    gitstatus: {\r\n        mytarget: {\r\n            options: {\r\n                prop:     'gitstatus.mytarget.result',\r\n                callback: function (result) { ... },\r\n            },\r\n        },\r\n    },\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options.prop\r\nType: `String`\r\nDefault value: `'gitstatus.<target name>.result'`.\r\n\r\nThe grunt property in which the result is stored.\r\n\r\n#### options.callback\r\nType: `Function`\r\nDefault value: none\r\n\r\nA callback function to call with the result.\r\n\r\n#### options.includeIgnored\r\nType: `Boolean`\r\nDefault value: `false`\r\n\r\nIf set to true, files ignored by git (in .gitignore for example) are included in the results with a code of \"!!\".\r\n\r\n## contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/rubenv/grunt-git.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "1.0.7"
}
